---
description: "Default Pipeline for CloudFront access logs"

processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: ["web"]
  - append:
      field: event.type
      value: ["access"]
  - set:
      field: cloud.provider
      value: aws
  - dot_expander:
      description: Expand all dotted fields, like aws firehose, kinesis etc.
      field: '*'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: ctx.event?.original != null
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - grok:
      field: event.original
      patterns:
        - ^%{CHAR:first_char}
      pattern_definitions:
        CHAR: .
  - pipeline:
      description: Process cloudfront realtime logs
      if: ctx.first_char == '{'
      name: '{{ IngestPipeline "pipeline_realtime_logs" }}'
      tag: pipeline_realtime_logs
      ignore_missing_pipeline: false
  - pipeline:
      description: Process cloudfront standard logs
      if: ctx.first_char != '{'
      name: '{{ IngestPipeline "pipeline_standard_logs" }}'
      tag: pipeline_realtime_logs
      ignore_missing_pipeline: false
  - remove:
      field:
        - first_char
  ### Common processors
  # url
  - script:
      lang: painless
      description: This script builds the `url.full` field out of the available `url.*` parts.
      source: |
        def full = "";
        if(ctx.network?.protocol != null && ctx.network?.protocol != "") {
            full += ctx.network.protocol+"://";
        }
        if(ctx.destination?.domain != null && ctx.destination?.domain != "") {
            full += ctx.destination.domain;
        }
        if(ctx.url?.path != null && ctx.url?.path != "") {
            full += ctx.url.path;
        }
        if(ctx.url?.query != null && ctx.url?.query != "") {
            full += "?"+ctx.url.query;
        }
        if (ctx._tmp == null) {
          ctx._tmp = new HashMap();
        }
        if(full != "") {
            ctx._tmp.url_full = full
        }
  - uri_parts:
      field: _tmp.url_full
      target_field: url
      keep_original: false
      ignore_missing: true
  - rename:
      field: _tmp.url_full
      target_field: url.full
      ignore_missing: true
  - registered_domain:
      field: url.domain
      target_field: url
      ignore_missing: true

  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true

  # cleanup
  - remove:
      field: _tmp
      ignore_missing: true

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: >-
        Processor '{{ _ingest.on_failure_processor_type }}'
        {{#_ingest.on_failure_processor_tag}}with tag '{{ _ingest.on_failure_processor_tag }}'
        {{/_ingest.on_failure_processor_tag}}failed with message '{{ _ingest.on_failure_message }}'
